import Gtk, GdkPixbuf
import Globals

class IconView(Gtk.IconView):
  def __init__(self):
    self.list_store = Gtk.ListStore(GdkPixbuf.Pixbuf,str)
    Gtk.IconView.__init__(self,model=self.list_store)
    self.get_style_context().add_class("icon-view")    
 
    self.set_pixbuf_column(0)
    self.set_markup_column(1)
    self.set_selection_mode(Gtk.SelectionMode.MULTIPLE)
    
    self.icon_theme=Gtk.IconTheme.get_default()
    self.fill_store('~*')
        
    dnd_list = Gtk.TargetEntry.new("text/uri-list", 0, 0)
    self.drag_dest_set(
      Gtk.DestDefaults.MOTION |
      Gtk.DestDefaults.HIGHLIGHT |
      Gtk.DestDefaults.DROP,
      [dnd_list],
      Gdk.DragAction.MOVE )
    self.drag_dest_add_uri_targets()

    Signals.connect('node-created', self.on_node_created)
    Signals.connect('current-treepath-changed', self.on_current_treepath_changed)

    self.connect("drag-data-received", self.on_drag_data_received)
    self.connect("key_release_event", self.on_key_release)
    self.connect('selection-changed',self.on_selection_changed)

  def on_selection_changed(self,arg):
    pathlist = self.get_selected_items()
    any_selected=0
    for path in pathlist:
      any_selected=1
      tree_iter = self.list_store.get_iter(path)
      selected_name = self.list_store.get_value(tree_iter,1)
      globals['selected-nodes'] = selected_name
      Signals.emit('nodes-selected',1)

  def on_drag_data_received(self, widget, drag_context, x, y, data, info, time):
    uris = data.get_uris()
    s = ""
    curr_path = globals['current-treepath']
    refresh_name=0
    for uri in uris:
      uri = uri.replace("file://","")
      bn = basename(uri)
      if isfile(uri):
        le.create_file(bn,uri)
        refresh_name=uri
        if len(curr_path)>0:
          le_query = '+["%s"],["%s"]' % ('" | "'.join(curr_path),bn)
          le.execute(le_query)
      else:
        for i in range(len(curr_path)): 
          le.create_label(curr_path[i])
          refresh_name=uri
          le_query = '+["%s"],["%s"]' % (curr_path[i-1],curr_path[i])
          le.execute('+["%s"],["%s"]' % ('" | "'.join(curr_path[:i]),curr_path[i]))
        for r,d,fs in os.walk(uri):
          rel = r.replace(uri,"")
          pl = pathlist(rel)
          for i in range(len(pl)):
            le.create_label(pl[i])
            refresh_name=pl[i]
            if i > 0:
              le_query = '+["%s"],["%s"]' % (pl[i-1],pl[i])
              le.execute(le_query)
          for f in fs:
            le.create_file(f,"%s/%s" % (r,f))
            refresh_name=f
            le_query = '+["%s"],["%s"]' % ('" | "'.join(pl),f)
            le.execute(le_query)
    refresh_name and Signals.emit('node-created',refresh_name)

class NewNodeButton(Gtk.Button):
  def __init__(self):
    Gtk.Button.__init__(self)
    self.get_style_context().add_class("new-node-button")

    label = Gtk.Label("(x)")
    self.add(label)
    
    self.connect("clicked",self.on_new_button_clicked)
        
  def on_new_button_clicked(self,button):
    le.empty_brain()    

class NewLabelEntry(Gtk.Entry):
  def __init__(self):
    Gtk.Entry.__init__(self)
    self.get_style_context().add_class("new-label-entry")

    self.set_placeholder_text("NEW LABEL")
    self.set_width_chars(9)
    
    self.connect('activate',self.on_activate)
    self.connect('notify::text',self.on_notify_text)
    
  def on_notify_text(self,entry,data):
    globals['NewLabelEntry-text'] = entry.get_text()
    
  def on_activate(self,entry):
    if 'NewLabelEntry-text' in globals:
      le.create_label(globals['NewLabelEntry-text'])
      for label in globals['current-treepath']:
        le.add_label_to_node(label,globals['NewLabelEntry-text'])
      Signals.emit('node-created',globals['NewLabelEntry-text'])    

class NewFileEntry(Gtk.Entry):
  def __init__(self):
    Gtk.Entry.__init__(self)
    self.get_style_context().add_class("new-file-entry")
 
    self.set_placeholder_text("new file")
    self.set_width_chars(11)

    self.connect('activate',self.on_activate)
    self.connect('notify::text',self.notify_text)
    
  def notify_text(self,entry,data):
    globals['NewFileEntry-text'] = entry.get_text();    

  def on_activate(self,entry):
    if 'NewFileEntry-text' in globals:
      le.create_file(globals['NewFileEntry-text'],"%s" % globals['NewFileEntry-text'])
      for label in globals['current-treepath']:
        le.add_label_to_node(label,globals['NewFileEntry-text'])
      Signals.emit('node-created',label['name'])    


class LocationBar(Gtk.Frame):
  def __init__(self):
    Gtk.Frame.__init__(self)
    self.get_style_context().add_class("location-bar")    
    self.set_shadow_type(Gtk.ShadowType.NONE)

    self.toolbar=Gtk.Toolbar()
    self.toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)
    self.add(self.toolbar)
    self.fill()

    Signals.connect('current-treepath-changed',self.on_query_changed)
    
  def on_query_changed(self,num,num2):
    self.fill()
      
  def fill(self):
    for child in self.toolbar.get_children():
      self.toolbar.remove(child)
    curr_path = globals['current-treepath']
    if len(curr_path) == 0:
      curr_path = ['ALL','LABELS']
      
    for node in curr_path:
      added=1
      togglebutton = LocationButton(node)
      togglebutton.set_active(1)
      self.toolbar.add(togglebutton)
    self.show_all()
          

  def on_node_created(self,num,num2):
    self.fill_store('~*')
  
  def on_current_treepath_changed(self,num,num2):
    le_query = '~*'
    curr_path = globals['current-treepath']
    if len(curr_path) >0:
      le_query = '~[<"%s"] | #<"%s"' % ('" & <"'.join(curr_path),curr_path[-1])

    self.fill_store(le_query)
    
  def fill_store(self,query):
    self.list_store.clear()

    for node in le.query(query):
      pixbuf = self.render_icon(Gtk.STOCK_FILE, Gtk.IconSize.DIALOG, None)
      #file= Gio.File.new_for_path(node['uri'])
      #type=file.query_file_type(0,None)
      #print "type=",type,file.get_path()
      self.list_store.append([pixbuf,node['name'].replace("&","")])

  def on_key_release(self,widget,event):
    if event.keyval == 65535:
      pathlist = self.get_selected_items()
      any_selected=0
      for path in pathlist:
        any_selected=1
        tree_iter = self.list_store.get_iter(path)
        selected_name = self.list_store.get_value(tree_iter,1)
        le.delete_node(selected_name)
      if any_selected: self.fill_store('~*')
        

class LocationButton(Gtk.ToggleToolButton):
  def __init__(self,text):
    Gtk.ToggleToolButton.__init__(self)
    self.get_style_context().add_class("location-button")

    button = Gtk.ToggleButton.new_with_label(text)
    child = self.get_child()

    self.remove(child)
    self.add(button)

