class TreeView(Gtk.TreeView):
  def __init__(self):
    Gtk.TreeView.__init__(self)
    self.get_style_context().add_class("tree-view")    

    self.tree_store = Gtk.TreeStore(str)
    self.set_model(self.tree_store)
    
    treeviewcolumn = Gtk.TreeViewColumn("Label")
    self.append_column(treeviewcolumn)
    cellrenderertext = Gtk.CellRendererText()
    treeviewcolumn.pack_start(cellrenderertext, False)
    treeviewcolumn.add_attribute(cellrenderertext, "text", 0)
    
    self.selection = self.get_selection()
    self.selection.set_mode(Gtk.SelectionMode.BROWSE)
    self.selection.connect("changed",self.on_change)
    self.set_size_request(200, -1)
    self.set_headers_visible(False)

    self.reset_store()
    
    path=Gtk.TreePath("0")
    self.expand_row(path,False)
    
    self.enable_model_drag_source(Gdk.ModifierType.BUTTON1_MASK,
                  [('text/plain', 0, 0)],
                  Gdk.DragAction.DEFAULT | Gdk.DragAction.MOVE)

    self.connect("drag-begin", self.drag_data_get_cb)
    Signals.connect('node-created', self.on_node_created)
    self.connect('row-expanded', self.on_row_expanded)
    self.connect('key_release_event',self.on_key_release)

  def drag_data_get_cb(self, context, selection):
      treeselection = self.get_selection()
      (model, iter) = treeselection.get_selected()
      text = self.tree_store.get_value(iter, 0)
      
      #pb=GdkPixbuf.Pixbuf()
      #pb.new_from_file("/home/gerard/label.svg")
      #display = self.get_display()
      #cursor=Gdk.Cursor.new_from_pixbuf(display,pb,0,0) #Gdk.CursorType.PENCIL)
      #cursor.new_from_pixbuf(pb)
      #gdkwin = Gdk.get_default_root_window()
      #gdkwin.set_cursor(cursor)
  
  def on_node_created(self,signal,name):
    tree_selection = self.get_selection()
    (model, pathlist) = tree_selection.get_selected_rows()
    iters_selected = []
    for path in pathlist:
      self.refresh_iter(self.tree_store.get_iter(path))
      self.expand_row(path, True)
    
  def reset_store(self):
    self.tree_store.clear()
    parent = self.tree_store.append(None, ('labels',))
    for node in le.query('#^<*'):
      if 'name' in node:
        parent2=self.tree_store.append(parent, (node['name'],))
        for node2 in le.query('#<"%s"'%node['name']):
          parent3=self.tree_store.append(parent2, (node2['name'],))
        
  def on_row_expanded(self,tree_view,tree_iter,path):
    self.refresh_iter(tree_iter)
  
  def refresh_iter(self,tree_iter):
    name = self.tree_store.get_value(tree_iter,0)
    child = self.tree_store.iter_children(tree_iter)
    # anem en compte de no eliminar tots els children
    # eliminem l'ultim despres d'afegir els nous
    while self.tree_store.iter_n_children(tree_iter) > 1:
      child_name = self.tree_store.get_value(child,0)
      self.tree_store.remove(child)
      child = self.tree_store.iter_children(tree_iter)
    name = self.tree_store.get_value(tree_iter,0)
    le_query=''
    if name == 'labels':
      le_query = ('#^<*')
    else:
      le_query = ('#<"%s"' % name)
      
    for node in le.query(le_query):
      if 'name' in node:
        parent2=self.tree_store.append(tree_iter, (node['name'],))
        parent3=self.tree_store.append(parent2, ('.',))
    if child != None:
      self.tree_store.remove(child)
        
  def on_change(self,tree_selection):
    (model, pathlist) = tree_selection.get_selected_rows()
    globals['current-treepath']=[]
    globals['selected-nodes']=[]
    for path in pathlist :
      tree_iter = model.get_iter(path)
      name = model.get_value(tree_iter,0)
      if name != 'labels':
        globals['current-treepath'].insert(0,name)
        globals['selected-nodes'].insert(0,name)
      parent = model.iter_parent(tree_iter)
      while parent != None:
        parent_name = model.get_value(parent,0)
        if parent_name != 'labels':
          globals['current-treepath'].insert(0,parent_name)
        parent = model.iter_parent(parent)

    Signals.emit('nodes-selected',1)
    Signals.emit('current-treepath-changed',1)

  def on_key_release(self,widget,event):
    if event.keyval == 65535:
      tree_selection = self.get_selection()
      (model, pathlist) = tree_selection.get_selected_rows()
      for path in pathlist :
        tree_iter = model.get_iter(path)
        selected_name = model.get_value(tree_iter,0)
        le.delete_node(selected_name)
        parent = model.iter_parent(tree_iter)
        self.refresh_iter(parent)
        #while parent != None:
        #  parent_name = model.get_value(parent,0)
        #  if parent_name != 'LABELS':
        #    le.remove_label_from_node(parent_name,selected_name)
        #    self.refresh_tree_iter(parent)
        #  parent = model.iter_parent(parent)

